`timescale 1ns / 1ps
module receiver_uart#(parameter count_per_bit = 868)( input logic clk,
input logic input_rx,
output logic [7:0] receiver_out,
output logic [31:0] receiver_memo );
logic parity_bit;
localparam idle = 2'b00; localparam start = 2'b01; localparam get_bit = 2'b10; localparam stop = 2'b11;
reg medi_rx = 1'b1;
reg receiver_uart = 1'b1; reg [1:0] state = 0;
reg [15:0] count_anod = 0; reg [8:0] obtained_data = 0; reg [3:0] current_bit = 0;
always @(posedge clk) begin medi_rx <= input_rx; receiver_uart <= medi_rx;
end
always @(posedge clk) begin case(state)
idle: begin
count_anod <= 0; current_bit <= 0; if(receiver_uart == 0)
state <= start; else
state <= idle; end
start: begin
if(count_anod == (count_per_bit-1)/2) begin
if(receiver_uart == 0) begin
 count_anod <= 0;
state <=get_bit; end
else begin state <= idle;
end end
else begin
count_anod <= count_anod + 1; state <= start;
end end
get_bit: begin
obtained_data[current_bit] <= input_rx; if(count_anod < (count_per_bit-1)) begin
count_anod <= count_anod + 1;
state <= get_bit; end
else begin
count_anod <= 0; if(current_bit < 8) begin
current_bit <= current_bit +3'b1;
state <= get_bit; end
else begin
receiver_out[7:0] <= obtained_data[7:0];
parity_bit = obtained_data[0]^obtained_data[1]^obtained_data[2]^obtained_data[3]^ obtained_data[4]^obtained_data[5]^obtained_data[6]^obtained_data[7];
if(parity_bit != obtained_data[8])begin
obtained_data <= 0; end
current_bit <= 0;
state <= stop; end
end end
stop: begin
if(count_anod < count_per_bit-1) begin
count_anod <= count_anod + 16'b1;
state <= stop; end
else begin
receiver_memo[31:24] <= receiver_memo[23:16]; receiver_memo[23:16] <= receiver_memo[15:8];

 receiver_memo[15:8] <= receiver_memo[7:0]; receiver_memo[7:0] <= obtained_data[7:0]; count_anod <= 0;
state <= idle;
end end
default: state <= idle; endcase
end
endmodule
Button Debouncer
`timescale 1ns / 1ps
module button_debouncer( input logic clk,
input logic btn,
output logic out_btn
);
logic previous = 0;
always_ff @(posedge clk)begin
previous <= btn;
if(btn && !previous)begin
out_btn <= 1; end
else begin out_btn <= 0;
end end
endmodule
